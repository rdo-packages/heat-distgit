From 731502e2bfa29fa6a88b5b7a4ccec9f74eac3606 Mon Sep 17 00:00:00 2001
From: Thomas Herve <therve@redhat.com>
Date: Tue, 20 Feb 2018 16:20:00 +0100
Subject: [PATCH] Handle non-stored stack in resource group

When creating a size 0 resource group with batch create policy, we could
get into a situation where the resource was created but the stack
wasn't. This fixes that, and still handle the problem in attribute
resolution for backward compatibility.

Change-Id: I8e139215281dc57fe4dd3ff856eef3ef88e20c6b
Closes-Bug: #1750270
---
 .../resources/openstack/heat/resource_group.py     | 42 +++++++++++-----------
 heat/tests/openstack/heat/test_resource_group.py   |  7 ++--
 .../openstack/heat/test_software_deployment.py     |  1 +
 3 files changed, 27 insertions(+), 23 deletions(-)

diff --git a/heat/engine/resources/openstack/heat/resource_group.py b/heat/engine/resources/openstack/heat/resource_group.py
index 5b8b89bdf..2450faed1 100644
--- a/heat/engine/resources/openstack/heat/resource_group.py
+++ b/heat/engine/resources/openstack/heat/resource_group.py
@@ -411,7 +411,7 @@ class ResourceGroup(stack_resource.StackResource):
 
     def handle_create(self):
         self._update_name_blacklist(self.properties)
-        if self.update_policy.get(self.BATCH_CREATE):
+        if self.update_policy.get(self.BATCH_CREATE) and self.get_size():
             batch_create = self.update_policy[self.BATCH_CREATE]
             max_batch_size = batch_create[self.MAX_BATCH_SIZE]
             pause_sec = batch_create[self.PAUSE_TIME]
@@ -503,25 +503,27 @@ class ResourceGroup(stack_resource.StackResource):
             output_name = self.REFS_MAP
         else:
             output_name = self._attribute_output_name(key, *path)
-        try:
-            output = self.get_output(output_name)
-        except (exception.NotFound,
-                exception.TemplateOutputError) as op_err:
-            LOG.debug('Falling back to grouputils due to %s', op_err)
-        else:
-            if is_resource_ref:
-                try:
-                    target = key.split('.', 2)[1]
-                    return output[target]
-                except KeyError:
-                    raise exception.NotFound(_("Member '%(mem)s' not "
-                                               "found in group resource "
-                                               "'%(grp)s'.") %
-                                             {'mem': target,
-                                              'grp': self.name})
-            if key == self.REFS:
-                return attributes.select_from_attribute(output, path)
-            return output
+
+        if self.resource_id is not None:
+            try:
+                output = self.get_output(output_name)
+            except (exception.NotFound,
+                    exception.TemplateOutputError) as op_err:
+                LOG.debug('Falling back to grouputils due to %s', op_err)
+            else:
+                if is_resource_ref:
+                    try:
+                        target = key.split('.', 2)[1]
+                        return output[target]
+                    except KeyError:
+                        raise exception.NotFound(_("Member '%(mem)s' not "
+                                                   "found in group resource "
+                                                   "'%(grp)s'.") %
+                                                 {'mem': target,
+                                                  'grp': self.name})
+                if key == self.REFS:
+                    return attributes.select_from_attribute(output, path)
+                return output
 
         if key.startswith("resource."):
             return grouputils.get_nested_attrs(self, key, False, *path)
diff --git a/heat/tests/openstack/heat/test_resource_group.py b/heat/tests/openstack/heat/test_resource_group.py
index ef421ae4f..deb59c6c9 100644
--- a/heat/tests/openstack/heat/test_resource_group.py
+++ b/heat/tests/openstack/heat/test_resource_group.py
@@ -781,9 +781,9 @@ class ResourceGroupTest(common.HeatTestCase):
         update_policy = {'batch_create': {'max_batch_size': 1}}
         snip = defn.freeze(properties=props, update_policy=update_policy)
         resgrp = resource_group.ResourceGroup('test', snip, stack)
-        self.patchobject(scheduler.TaskRunner, 'start')
-        checkers = resgrp.handle_create()
-        self.assertEqual(0, len(checkers))
+        resgrp.create_with_template = mock.Mock(return_value=None)
+        self.assertIsNone(resgrp.handle_create())
+        self.assertEqual(1, resgrp.create_with_template.call_count)
 
     def test_run_to_completion(self):
         stack = utils.parse_stack(template2)
@@ -1128,6 +1128,7 @@ class ResourceGroupAttrTest(common.HeatTestCase):
                             expect_attrs=None):
         stack = utils.parse_stack(template_data)
         resg = stack['group1']
+        resg.resource_id = 'test-test'
         attrs = {}
         refids = {}
         if expect_attrs is None:
diff --git a/heat/tests/openstack/heat/test_software_deployment.py b/heat/tests/openstack/heat/test_software_deployment.py
index 5042de249..1ee154994 100644
--- a/heat/tests/openstack/heat/test_software_deployment.py
+++ b/heat/tests/openstack/heat/test_software_deployment.py
@@ -1596,6 +1596,7 @@ class SoftwareDeploymentGroupAttrTest(common.HeatTestCase):
     def create_dummy_stack(self):
         snip = self.stack.t.resource_definitions(self.stack)['deploy_mysql']
         resg = sd.SoftwareDeploymentGroup('test', snip, self.stack)
+        resg.resource_id = 'test-test'
         nested = self.patchobject(resg, 'nested')
         nested.return_value = dict(zip(self.server_names, self.servers))
         self._stub_get_attr(resg)
-- 
2.13.6

