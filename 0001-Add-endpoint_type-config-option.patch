From 466cdc22f9bfd74e1865f1e6943ab4712e65635c Mon Sep 17 00:00:00 2001
From: Chandan Kumar <chkumar@redhat.com>
Date: Thu, 29 Mar 2018 16:27:20 +0530
Subject: [PATCH] Add endpoint_type config option

Prior to their removal from the tempest repository, the heat tests
supported an endpoint_type option[1] to configure which endpoint
interface to use in its requests to the Orchestration service and
other OpenStack services. This patch adds back this support so
that users can configure the heat tests to run against non-public interfaces.

[1] http://git.openstack.org/cgit/openstack/tempest/tree/tempest/config.py?h=17.2.0#n943

Change-Id: Id86f90e428136198b4244f12da5eb53f673fd788
(cherry picked from commit 30b1fd6903f8f7bf33ccefc12046e301b85bac9c)
---
 heat_integrationtests/api/test_heat_api.py |  2 +-
 heat_integrationtests/common/clients.py    | 19 +++++++++++--------
 heat_integrationtests/common/config.py     |  4 ++++
 3 files changed, 16 insertions(+), 9 deletions(-)

diff --git a/heat_integrationtests/api/test_heat_api.py b/heat_integrationtests/api/test_heat_api.py
index 2e219e7..62a73dd 100644
--- a/heat_integrationtests/api/test_heat_api.py
+++ b/heat_integrationtests/api/test_heat_api.py
@@ -35,7 +35,7 @@ def load_tests(loader, tests, pattern):
         return
     manager = clients.ClientManager(conf)
     endpoint = manager.identity_client.get_endpoint_url(
-        'orchestration', conf.region)
+        'orchestration', region=conf.region, endpoint_type=conf.endpoint_type)
     host = urlparse.urlparse(endpoint).hostname
     os.environ['OS_TOKEN'] = manager.identity_client.auth_token
     os.environ['PREFIX'] = test.rand_name('api')
diff --git a/heat_integrationtests/common/clients.py b/heat_integrationtests/common/clients.py
index 48db671..186a1bf 100644
--- a/heat_integrationtests/common/clients.py
+++ b/heat_integrationtests/common/clients.py
@@ -48,10 +48,12 @@ class KeystoneWrapperClient(object):
     def project_id(self):
         return self.auth_plugin.get_project_id(self.session)
 
-    def get_endpoint_url(self, service_type, region=None):
+    def get_endpoint_url(self, service_type, region=None,
+                         endpoint_type='public'):
         kwargs = {
             'service_type': service_type,
-            'region_name': region}
+            'region_name': region,
+            'interface': endpoint_type}
         return self.auth_ref.service_catalog.url_for(**kwargs)
 
 
@@ -113,7 +115,8 @@ class ClientManager(object):
         try:
             if endpoint is None:
                 endpoint = self.identity_client.get_endpoint_url(
-                    'orchestration', self.conf.region)
+                    'orchestration', region=self.conf.region,
+                    endpoint_type=self.conf.endpoint_type)
         except kc_exceptions.EndpointNotFound:
             return None
         else:
@@ -156,7 +159,7 @@ class ClientManager(object):
             self.NOVA_API_VERSION,
             session=self.identity_client.session,
             service_type='compute',
-            endpoint_type='publicURL',
+            endpoint_type=self.conf.endpoint_type,
             region_name=self.conf.region,
             os_cache=False,
             http_log_debug=True)
@@ -167,13 +170,13 @@ class ClientManager(object):
             session=self.identity_client.session,
             service_type='network',
             region_name=self.conf.region,
-            endpoint_type='publicURL')
+            endpoint_type=self.conf.endpoint_type)
 
     def _get_volume_client(self):
         return cinder_client.Client(
             self.CINDERCLIENT_VERSION,
             session=self.identity_client.session,
-            endpoint_type='publicURL',
+            endpoint_type=self.conf.endpoint_type,
             region_name=self.conf.region,
             http_log_debug=True)
 
@@ -181,7 +184,7 @@ class ClientManager(object):
         args = {
             'auth_version': self.auth_version,
             'session': self.identity_client.session,
-            'os_options': {'endpoint_type': 'publicURL',
+            'os_options': {'endpoint_type': self.conf.endpoint_type,
                            'region_name': self.conf.region,
                            'service_type': 'object-store'},
         }
@@ -197,7 +200,7 @@ class ClientManager(object):
             args = {
                 'session': self.identity_client.session,
                 'region_name': self.conf.region,
-                'endpoint_type': 'publicURL',
+                'endpoint_type': self.conf.endpoint_type,
                 'service_type': 'metering',
             }
             return ceilometer_client.Client(self.CEILOMETER_VERSION,
diff --git a/heat_integrationtests/common/config.py b/heat_integrationtests/common/config.py
index d7126c4..b36eb26 100644
--- a/heat_integrationtests/common/config.py
+++ b/heat_integrationtests/common/config.py
@@ -67,6 +67,10 @@ HeatGroup = [
                     "is used"),
     cfg.StrOpt('region',
                help="The region name to use"),
+    cfg.StrOpt('endpoint_type',
+               default='public',
+               choices=['public', 'admin', 'internal'],
+               help="The endpoint type to use for the orchestration service."),
     cfg.StrOpt('instance_type',
                help="Instance type for tests. Needs to be big enough for a "
                     "full OS plus the test workload"),
